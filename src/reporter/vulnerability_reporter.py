import logging
from typing import Dict

class VulnerabilityReporter:
    def __init__(self, log_file='vulnerabilities.log'):
        self.vulnerabilities = []
        logging.basicConfig(filename=log_file, level=logging.INFO, format='%(asctime)s - %(message)s')

    def add_vulnerability(self, vulnerability: Dict):
        vulnerability.setdefault('status_code', 'N/A')
        vulnerability.setdefault('response', 'N/A')
        if vulnerability["vulnerable"]:
            self.vulnerabilities.append(vulnerability)
            logging.info(f"Vulnerable endpoint: {vulnerability['endpoint']}, "
                         f"Parameter: {vulnerability['param']}, "
                         f"Payload: {vulnerability['payload']}, "
                         f"Status Code: {vulnerability['status_code']}, "
                         f"Response: {vulnerability['response']}")

    def generate_report(self):
        report = "\nVulnerability Report\n\n"
        for vulnerability in self.vulnerabilities:
            report += f"Endpoint: {vulnerability['endpoint']}\n"
            report += f"Parameter: {vulnerability['param']}\n"
            report += f"Payload: {vulnerability['payload']}\n"
            report += f"Status Code: {vulnerability['status_code']}\n"
            report += f"Response: {vulnerability['response']}\n"
            report += f"Vulnerable: {vulnerability['vulnerable']}\n\n"
        return report
